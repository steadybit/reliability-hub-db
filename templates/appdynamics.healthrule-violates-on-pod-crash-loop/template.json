{
  "id": "0196fc34-1e86-7972-8537-1ea92504f113",
  "templateTitle": "AppDynamics alerts when a Kubernetes pod is in crash loop",
  "templateDescription": "Verify that an AppDynamics health violation alerts you when pods are not ready to accept traffic for a certain time.\n\n## Motivation\n\nKubernetes features a readiness probe to determine whether your pod is ready to accept traffic.\nIf it isn't becoming ready, Kubernetes tries to solve it by restarting the underlying container and hoping to achieve its readiness eventually.\nIf this isn't working, Kubernetes will eventually back off to restart the container, and the Kubernetes resource remains non-functional.\n\n\n## Structure\n\nFirst, check that the AppDynamics health violation responsible for tracking non-ready containers is in a non-violating state.\nAs soon as one of the containers is crash looping, caused by the [crash loop](https://hub.steadybit.com/action/com.steadybit.extension_kubernetes.crash_loop_pod) attack, the AppDynamics health violation should notify and escalate it to your on-call team.\n\n## Solution Sketch\n\n- [Kubernetes liveness, readiness, and startup probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)",
  "placeholders": [
    {
      "key": "k8sClusterName",
      "name": "Kubernetes Cluster Name",
      "description": "### What is the Kubernetes cluster in which the deployment under test is running?"
    },
    {
      "key": "k8sNamespace",
      "name": "Kubernetes Namespace",
      "description": "### What is the Kubernetes namespace in which the pod under test is running?"
    },
    {
      "key": "k8sWorkloadOwner",
      "name": "Kubernetes Workload Owner",
      "description": "### What is the Kubernetes workload under test?\nIt can be anything that can schedule a pod (e.g., deployment, statefulset, ...)"
    },
    {
      "key": "appDynamicsApplicationName",
      "name": "AppDynamics Application Name",
      "description": "### What is the Application Name in AppDynamics?\nWe will use the application name to surpress actions for violationg health rules."
    },
    {
      "key": "appDynamicsHealthViolation",
      "name": "AppDynamics Health Violation Name",
      "description": "### Which Health Violation should notice the crash loop?"
    }
  ],
  "tags": [
    "AppDynamics",
    "Crash loop",
    "Harden Observability",
    "Restart",
    "Kubernetes"
  ],
  "experimentName": "AppDynamics should alert about crash looping of [[k8sWorkloadOwner]]",
  "hypothesis": "Whenever a pod of [[k8sWorkloadOwner]] is crash looping, AppDynamics notifies us.",
  "lanes": [
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "10s",
            "stateCheckMode": "allTheTime",
            "violation": "false"
          },
          "customLabel": "GIVEN: Health Rule isn't violated",
          "actionType": "com.steadybit.extension_appdynamics.health-rule.check",
          "radius": {
            "targetType": "com.steadybit.extension_appdynamics.health-rule",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "appdynamics.health-rule.name",
                  "operator": "EQUALS",
                  "values": [
                    "[[appDynamicsHealthViolation]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "wait",
          "ignoreFailure": false,
          "parameters": {
            "duration": "10s"
          }
        },
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "2m"
          },
          "customLabel": "WHEN: Kubernetes pod of [[k8sWorkloadOwner]] crash loops",
          "actionType": "com.steadybit.extension_kubernetes.crash_loop_pod",
          "radius": {
            "targetType": "com.steadybit.extension_kubernetes.kubernetes-pod",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                },
                {
                  "key": "k8s.namespace",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sNamespace]]"
                  ]
                },
                {
                  "key": "k8s.workload-owner",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sWorkloadOwner]]"
                  ]
                }
              ]
            },
            "query": null,
            "percentage": 100
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "wait",
          "ignoreFailure": false,
          "parameters": {
            "duration": "10s"
          }
        },
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "3m",
            "stateCheckMode": "atLeastOnce",
            "violation": "true"
          },
          "customLabel": "THEN: Health rule should turn into 'Alert' state because of non-ready pods",
          "actionType": "com.steadybit.extension_appdynamics.health-rule.check",
          "radius": {
            "targetType": "com.steadybit.extension_appdynamics.health-rule",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "appdynamics.health-rule.name",
                  "operator": "EQUALS",
                  "values": [
                    "[[appDynamicsHealthViolation]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "190s",
            "disableAgentReporting": false
          },
          "customLabel": "Suppress Actions for [[appDynamicsApplicationName]]",
          "actionType": "com.steadybit.extension_appdynamics.application.action-suppression",
          "radius": {
            "targetType": "com.steadybit.extension_appdynamics.application",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "appdynamics.application.name",
                  "operator": "EQUALS",
                  "values": [
                    "[[appDynamicsApplicationName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "190s"
          },
          "customLabel": "Show Kubernetes events from the cluster",
          "actionType": "com.steadybit.extension_kubernetes.kubernetes_logs",
          "radius": {
            "targetType": "com.steadybit.extension_kubernetes.kubernetes-cluster",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "190s"
          },
          "customLabel": "Show pod count metrics for the cluster",
          "actionType": "com.steadybit.extension_kubernetes.pod_count_metric",
          "radius": {
            "targetType": "com.steadybit.extension_kubernetes.kubernetes-cluster",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    }
  ],
  "properties": {}
}
{
  "id": "0363a90e-9563-494c-bd25-81da6e4c3d55",
  "templateTitle": "New Relic should detect a disrupted workflow when a workload is unavailable",
  "templateDescription": "Verify that New Relic alerts you to disruptions in your workflow, such as a critical deployment without pods ready to serve traffic.\n\n## Motivation\nKubernetes features a liveness probe to determine whether your pod is healthy and can accept traffic.\nIf Kubernetes cannot probe a pod, it restarts it in the hope that it will eventually be ready.\nIn case it is a critical deployment, New Relic workflow should alert on this disruption\n\n## Structure\nFirst, check that the New Relic Workflow is marked as operational\nAs soon as all pods of a workload aren't reachable, caused by the [block traffic](https://hub.steadybit.com/action/com.steadybit.extension_container.network_blackhole) attack, New Relic should detect this by marking the workflow as disrupted and ensuring your on-call team is taking action.\n\n## Solution Sketch\n\n- [Kubernetes liveness, readiness, and startup probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)\n- [New Relic Workflow](https://docs.newrelic.com/docs/alerts-applied-intelligence/applied-intelligence/incident-workflows/incident-workflows/)",
  "placeholders": [
    {
      "key": "k8sClusterName",
      "name": "Kubernetes Cluster Name",
      "description": "## What is the Kubernetes cluster in which the pod under test is running?"
    },
    {
      "key": "k8sNamespace",
      "name": "Kubernetes Namespace",
      "description": "## What is the Kubernetes namespace in which the pod under test is running?"
    },
    {
      "key": "k8sWorkloadOwner",
      "name": "Kubernetes Workload Owner",
      "description": "## What is the Kubernetes workload under test? It can be anything that can schedule a pod (e.g., deployment, statefulset, ...)"
    },
    {
      "key": "newRelicAccountId",
      "name": "New Relic Account Id",
      "description": "## Which New Relic Account Id do you want to check for the problem?"
    },
    {
      "key": "newRelicWorkloadName",
      "name": "New Relic Workload Name",
      "description": "## Which New Relic Workload do you expect to be disrupted?"
    }
  ],
  "tags": [
    "New Relic",
    "Harden Observability",
    "Kubernetes"
  ],
  "experimentName": "New Relic should detect a disrupted workflow when [[k8sWorkloadOwner]] is unavailable",
  "hypothesis": "Whenever all pods of [[k8sWorkloadOwner]] can't be reached, the New Relic workload [[newRelicWorkloadName]] is disrupted.",
  "lanes": [
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "15s",
            "conditionCheckMode": "allTheTime",
            "expectedStates": [
              "OPERATIONAL"
            ]
          },
          "customLabel": "Given: Workflow is operational",
          "actionType": "com.steadybit.extension_newrelic.workload_check",
          "radius": {
            "targetType": "com.steadybit.extension_newrelic.workload",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "new-relic.workload.account",
                  "operator": "EQUALS",
                  "values": [
                    "[[newRelicAccountId]]"
                  ]
                },
                {
                  "key": "new-relic.workload.name",
                  "operator": "EQUALS",
                  "values": [
                    "[[newRelicWorkloadName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "wait",
          "ignoreFailure": false,
          "parameters": {
            "duration": "15s"
          }
        },
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "180s",
            "failOnHostNetwork": true,
            "hostname": [],
            "port": [],
            "ip": []
          },
          "customLabel": "WHEN: [[k8sWorkloadOwner]] can't be reached",
          "actionType": "com.steadybit.extension_container.network_blackhole",
          "radius": {
            "targetType": "com.steadybit.extension_container.container",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.namespace",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sNamespace]]"
                  ]
                },
                {
                  "key": "k8s.workload-owner",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sWorkloadOwner]]"
                  ]
                },
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                }
              ]
            },
            "query": null,
            "percentage": 100
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "wait",
          "ignoreFailure": false,
          "parameters": {
            "duration": "15s"
          }
        },
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "300s",
            "conditionCheckMode": "atLeastOnce",
            "expectedStates": [
              "DISRUPTED"
            ]
          },
          "customLabel": "THEN: Workflow should be disrupted",
          "actionType": "com.steadybit.extension_newrelic.workload_check",
          "radius": {
            "targetType": "com.steadybit.extension_newrelic.workload",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "new-relic.workload.account",
                  "operator": "EQUALS",
                  "values": [
                    "[[newRelicAccountId]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "wait",
          "ignoreFailure": false,
          "parameters": {
            "duration": "15s"
          }
        },
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "300s"
          },
          "customLabel": "WHILE: Muting New Relic to avoid escalations",
          "actionType": "com.steadybit.extension_newrelic.create_muting_rule",
          "radius": {
            "targetType": "com.steadybit.extension_newrelic.account",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "new-relic.account.id",
                  "operator": "EQUALS",
                  "values": [
                    "[[newRelicAccountId]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "315s"
          },
          "customLabel": "Show Kubernetes events from the cluster",
          "actionType": "com.steadybit.extension_kubernetes.kubernetes_logs",
          "radius": {
            "targetType": "com.steadybit.extension_kubernetes.kubernetes-cluster",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    },
    {
      "steps": [
        {
          "type": "action",
          "ignoreFailure": false,
          "parameters": {
            "duration": "315s"
          },
          "customLabel": "Show Pod Count Metrics for the cluster",
          "actionType": "com.steadybit.extension_kubernetes.pod_count_metric",
          "radius": {
            "targetType": "com.steadybit.extension_kubernetes.kubernetes-cluster",
            "predicate": {
              "operator": "AND",
              "predicates": [
                {
                  "key": "k8s.cluster-name",
                  "operator": "EQUALS",
                  "values": [
                    "[[k8sClusterName]]"
                  ]
                }
              ]
            },
            "query": null
          }
        }
      ]
    }
  ]
}
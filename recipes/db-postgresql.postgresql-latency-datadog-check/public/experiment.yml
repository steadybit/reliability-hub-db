--- !<experiment>
name: "Verify system behaviour when PostgreSQL database suffers of latency"
team: "{{teamKey}}"
hypothesis: "Under simulated Postgres latency conditions, the system can maintain its performance and indicate unavailability appropriately. The 
system's performance will return to normal after the latency has ended."
environment: "{{environmentName}}"
lanes:
  - steps:
      - !<action>
        ignoreFailure: false
        parameters:
          url: "http://demo.steadybit.io/products"
          method: "GET"
          headers: []
          duration: "10s"
          statusCode: "200-299"
          readTimeout: "5s"
          successRate: 100
          maxConcurrent: 5
          connectTimeout: "5s"
          followRedirects: false
          requestsPerSecond: 5
        customLabel: "GIVEN: All HTTP requests are successful"
        actionType: "check:http"
        radius:
          maximum: 1
  - steps:
      - !<action>
        ignoreFailure: false
        parameters:
          cluster: "demo-prod"
          duration: "10s"
          podcount: "podCountEqualsDesiredCount"
          namespace: "steadybit-demo"
        customLabel: "GIVEN: All pods are ready"
        actionType: "check:kubernetes-pod-count"
        radius: {}
      - !<action>
        ignoreFailure: false
        parameters:
          port: "5432"
          duration: "60s"
          networkDelay: "100ms"
          networkInterface: "eth0"
          networkDelayJitter: false
        customLabel: "WHEN: PostgreSQL suffers latencies"
        actionType: "container-network-delay-attack"
        radius:
          targetType: "container"
          predicate:
            operator: "AND"
            predicates:
              - key: "k8s.deployment"
                operator: "EQUALS"
                values:
                  - "steadybit-demo"
              - key: "k8s.container.name"
                operator: "EQUALS"
                values:
                  - "main"
              - key: "k8s.cluster-name"
                operator: "EQUALS"
                values:
                  - "demo-prod"
              - key: "k8s.namespace"
                operator: "EQUALS"
                values:
                  - "steadybit-demo"
          query: null
          percentage: 100
  - steps:
      - !<wait>
        ignoreFailure: false
        parameters:
          duration: "10s"
      - !<action>
        ignoreFailure: false
        parameters:
          url: "http://demo.steadybit.io/products"
          method: "GET"
          headers: []
          duration: "70s"
          statusCode: "200-399"
          readTimeout: "5s"
          successRate: 90
          maxConcurrent: 5
          connectTimeout: "5s"
          followRedirects: false
          requestsPerSecond: 5
        customLabel: "THEN: HTTP requests are slow but mostly successful"
        actionType: "check:http"
        radius:
          maximum: 1
  - steps:
      - !<wait>
        ignoreFailure: false
        parameters:
          duration: "10s"
      - !<action>
        ignoreFailure: false
        parameters:
          duration: "70s"
          expectedStatusList:
            - "OK"
            - "No Data"
        customLabel: "Monitors should be OK or No Data"
        actionType: "com.steadybit.extension_datadog.monitor.status_check"
        radius:
          targetType: "com.steadybit.extension_datadog.monitor"
          predicate:
            operator: "AND"
            predicates:
              - key: "datadog.monitor.tags"
                operator: "EQUALS"
                values:
                  - "service:test"
          query: null

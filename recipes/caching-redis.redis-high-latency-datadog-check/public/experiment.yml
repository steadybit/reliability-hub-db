---
!<experiment>
name: "Verify graceful degradation while Redis suffers a high latency"
team: "{{teamKey}}"
hypothesis: "Under simulated Redis latency conditions, the system can maintain its performance and indicate unavailability appropriately. The 
system's performance will return to normal after the latency has ended."
environment: "{{environmentName}}"
lanes:
  - steps:
      - !<action>
        ignoreFailure: false
        parameters:
          url: "https://api/healthcheck"
          method: GET
          headers: []
          duration: 3m
          statusCode: 200-299
          readTimeout: 5s
          successRate: 95
          maxConcurrent: 5
          connectTimeout: 5s
          followRedirects: false
          requestsPerSecond: 1
        customLabel: 'HTTP Check : The service should survive a redis latency'
        actionType: check:http
        radius: {}
  - steps:
      - !<wait>
        ignoreFailure: false
        parameters:
          duration: "30s"
      - !<action>
        ignoreFailure: false
        parameters:
          port: "6379"
          duration: "2m"
          networkDelay: "300ms"
          networkInterface: "eth0"
          networkDelayJitter: true
        customLabel: "WHEN: Redis is slow because of a network issue"
        actionType: "container-network-delay-attack"
        radius:
          targetType: "container"
          predicate:
            operator: "AND"
            predicates:
              - key: "k8s.deployment"
                operator: "EQUALS"
                values:
                  - "steadybit-demo"
              - key: "k8s.container.name"
                operator: "EQUALS"
                values:
                  - "main"
              - key: "k8s.cluster-name"
                operator: "EQUALS"
                values:
                  - "demo-prod"
              - key: "k8s.namespace"
                operator: "EQUALS"
                values:
                  - "steadybit-demo"
          query: null
          percentage: 100
  - steps:
      - !<action>
        ignoreFailure: false
        parameters:
          duration: "30s"
          expectedStatusList:
            - "OK"
            - "No Data"
        customLabel: "Monitors should be OK or No Data"
        actionType: "com.steadybit.extension_datadog.monitor.status_check"
        radius:
          targetType: "com.steadybit.extension_datadog.monitor"
          predicate:
            operator: "AND"
            predicates:
              - key: "datadog.monitor.tags"
                operator: "EQUALS"
                values:
                  - "service:test"
          query: null
      - !<wait>
        ignoreFailure: false
        parameters:
          duration: "5s"
      - !<action>
        ignoreFailure: false
        parameters:
          duration: 20s
          podcount: "podCountEqualsDesiredCount"
          namespace: "steadybit-demo"
          deployment: "gateway"
        customLabel: "Pod should be resilient to high latency of the cache"
        actionType: check:kubernetes-pod-count
      - !<action>
        ignoreFailure: true
        parameters:
          duration: "100s"
          expectedStatus: "Alert"
          statusCheckMode: "atLeastOnce"
        customLabel: "Monitor should alert a latency issue"
        actionType: "com.steadybit.extension_datadog.monitor.status_check"
        radius:
          targetType: "com.steadybit.extension_datadog.monitor"
          predicate:
            operator: "AND"
            predicates:
              - key: "datadog.monitor.tags"
                operator: "EQUALS"
                values:
                  - "service:test"
          query: null
      - !<wait>
        ignoreFailure: false
        parameters:
          duration: "20s"
      - !<action>
        ignoreFailure: false
        parameters:
          duration: "30s"
          expectedStatus: "OK"
        customLabel: "Monitor should go back to green"
        actionType: "com.steadybit.extension_datadog.monitor.status_check"
        radius:
          targetType: "com.steadybit.extension_datadog.monitor"
          predicate:
            operator: "AND"
            predicates:
              - key: "datadog.monitor.tags"
                operator: "EQUALS"
                values:
                  - "service:test"
          query: null
